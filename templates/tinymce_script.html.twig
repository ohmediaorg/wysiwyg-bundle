<style>
.tox-promotion,
.tox-statusbar__branding {
  visibility: hidden !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: 0 !important;
}
</style>

<script src="/backend/js/tinymce/tinymce.min.js"></script>

<script async>
const OH_MEDIA_TINYMCE_PLUGINS = {{ plugins|js }};
const OH_MEDIA_TINYMCE_MENU = {{ menu|js }};
const OH_MEDIA_TINYMCE_TOOLBAR = {{ toolbar|js }};
const OH_MEDIA_TINYMCE_LINK_CLASS_LIST = {{ link_class_list|js }};
const OH_MEDIA_TINYMCE_VALID_ELEMENTS = {{ valid_elements|js }};

function OH_MEDIA_TINYMCE(container, selector) {
  const els = container.querySelectorAll(selector);

  els.forEach(el => {
    el.required = false;

    let plugins = OH_MEDIA_TINYMCE_PLUGINS;

    if ('false' === el.dataset.tinymceAllowShortcodes) {
      plugins = plugins
        .replace('ohshortcodes', '')
        .replace('ohfilebrowser', '')
        .replace('ohcontentlinks', '');
    }

    const validElements = el.dataset.tinymceValidElements ?? OH_MEDIA_TINYMCE_VALID_ELEMENTS;

    tinymce.init({
      target: el,
      plugins: plugins,
      menu: OH_MEDIA_TINYMCE_MENU,
      toolbar: OH_MEDIA_TINYMCE_TOOLBAR,
      toolbar_mode: 'wrap',
      image_list: '{{ path('tinymce_image_list') }}',
      image_caption: true,
      image_description: false,
      content_style: "a.btn { border:1px solid; padding:5px; }",
      image_class_list: [
        { title: 'None', value: '' },
        { title: 'Float left', value: 'float-start' },
        { title: 'Float right', value: 'float-end' },
      ],
      block_formats: [
          'Paragraph=p',
          'Heading 2=h2',
          'Heading 3=h3',
          'Heading 4=h4',
          'Heading 5=h5',
          'Heading 6=h6',
          'Blockquote=blockquote',
          'Div=div',
      ].join(';'),
      link_class_list: OH_MEDIA_TINYMCE_LINK_CLASS_LIST,
      paste_block_drop: true,
      paste_data_images: false,
      quickbars_insert_toolbar: false,
      quickbars_image_toolbar: false,
      license_key: 'gpl',
      max_height: 600,
      valid_elements: validElements,
      document_base_url: '{{ app.request.baseUrl }}/',
      relative_urls: false,
      urlconverter_callback: function(url, node, on_save, name) {
        // Making sure shortcodes are handled properly.
        // NOTE: cannot use double { because it is seen as Twig syntax.
        if (url.indexOf('{') >= 0) {
          return url.replace('/{', '{');
        }

        // Allowing for hash links.
        if (0 === url.indexOf('#')) {
          return url;
        }

        // The following are lines copied/modified from convertURL. We cannot
        // call this.convertURL() directly without infinite recursion.
        const self = this, getOption = self.options.get;

        if (!getOption('convert_urls') || node === 'link' || (typeof node === 'object' && node.nodeName === 'LINK') || url.indexOf('file:') === 0 || url.length === 0) {
          return url;
        }

        try {
          const urlObject = new URL(url);
          if (urlObject.protocol !== 'http' && urlObject.protocol !== 'https' && urlObject.protocol !== '') {
            return url;
          }
        } catch(e) {
        }

        if (getOption('relative_urls')) {
          return self.documentBaseURI.toRelative(url);
        }

        url = self.documentBaseURI.toAbsolute(url, getOption('remove_script_host'));

        return url;
      },
    });
  });
}

document.addEventListener('DOMContentLoaded', function() {
  window.initTinyMCEShortcodesPlugin('{{ path('tinymce_shortcodes') }}');

  {% if file_browser_enabled %}
  window.initTinyMCEFilebrowserPlugin('{{ path('tinymce_filebrowser') }}');
  {% endif %}

  window.initTinyMCEContentlinkPlugin('{{ path('tinymce_contentlinks') }}');

  OH_MEDIA_TINYMCE(document, 'textarea.tinymce');
});
</script>
